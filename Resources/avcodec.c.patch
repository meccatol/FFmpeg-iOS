
// added by K.Y.H

int avcodec_get_buffer(AVCodecContext *avctx, AVFrame *frame, int flags);
int avcodec_get_buffer(AVCodecContext *avctx, AVFrame *frame, int flags)
{
    return ff_get_buffer(avctx, frame, flags);
}

#include "mpegaudiodecheader.h"
int avcodec_mpa_decode_header(uint32_t head, int *sample_rate,
                         int *channels, int *frame_size, int *bitrate, enum AVCodecID *codec_id);
int avcodec_mpa_decode_header(uint32_t head, int *sample_rate,
                         int *channels, int *frame_size, int *bitrate, enum AVCodecID *codec_id)
{
    return ff_mpa_decode_header(head, sample_rate, channels, frame_size, bitrate, codec_id);
}

#include "ac3_parser_internal.h"
int avcodec_ac3_parse_header(GetBitContext *gbc, AC3HeaderInfo *hdr);
int avcodec_ac3_parse_header(GetBitContext *gbc, AC3HeaderInfo *hdr)
{
    return ff_ac3_parse_header(gbc, hdr);
}


static int escape_ps(uint8_t* dst, const uint8_t* src, int src_size)
{
    int size = src_size;
    uint8_t* p = dst;

    for (int i = 0; i < src_size; i++) {
        if (i + 2 < src_size &&
            src[i]     == 0x00 &&
            src[i + 1] == 0x00 &&
            src[i + 2] <= 0x03) {
            if (dst) {
                *p++ = src[i++];
                *p++ = src[i];
                *p++ = 0x03;
            } else {
                i++;
            }
            size++;
        } else if (dst)
            *p++ = src[i];
    }

    if (dst)
        assert((p - dst) == size);

    return size;
}

#define AV_W8(p, v) *(p) = (v)

#include "hevc_parse.h"

static int parse_hevc(AVCodecContext *avctx, uint8_t *data, int size, HEVCParamSets *ps, HEVCSEI *sei, int *nal_length_size)
{
    int is_nalff = 0;
    int ret = ff_hevc_decode_extradata(data, size, ps, sei, &is_nalff, nal_length_size, 0, 1, avctx);
    
    if (ret < 0)
        return ret;
    
    for (int i = 0; i < HEVC_MAX_VPS_COUNT; i++) {
        if (ps->vps_list[i]->data) {
            ps->vps = (HEVCVPS *)ps->vps_list[i]->data;
            break;
        }
    }
    for (int i = 0; i < HEVC_MAX_PPS_COUNT; i++) {
        if (ps->pps_list[i]->data) {
            ps->pps = (HEVCPPS *)ps->pps_list[i]->data;
            break;
        }
    }
    for (int i = 0; i < HEVC_MAX_SPS_COUNT; i++) {
        if (ps->sps_list[i]->data) {
            ps->sps = (HEVCSPS *)ps->sps_list[i]->data;
            break;
        }
    }
    return ret;
}

uint8_t *avcodec_videotoolbox_hvcc_extradata_create(AVCodecContext *avctx, uint8_t *data, int size, int *nal_length_size, int *data_size);
uint8_t *avcodec_videotoolbox_hvcc_extradata_create(AVCodecContext *avctx, uint8_t *data, int size, int *nal_length_size, int *data_size)
{
    HEVCParamSets ps = { 0, };
    HEVCSEI sei = { 0, };
    int ret = parse_hevc(avctx, data, size, &ps, &sei, nal_length_size);
    
    if (ret >= 0) {
        const HEVCVPS *vps = ps.vps;
        const HEVCSPS *sps = ps.sps;
        const HEVCPPS *pps = ps.pps;
        int num_vps = 0, num_sps = 0, num_pps = 0;
        PTLCommon ptlc = vps->ptl.general_ptl;
        VUI vui = sps->vui;
        uint8_t parallelismType;
        int vt_extradata_size = 23 + 3 + 3 + 3;
        uint8_t *vt_extradata;
        uint8_t *p;
     
    #define COUNT_SIZE_PS(T, t) \
        for (int i = 0; i < HEVC_MAX_##T##PS_COUNT; i++) { \
            if (ps.t##ps_list[i]) { \
                const HEVC##T##PS *lps = (const HEVC##T##PS *)ps.t##ps_list[i]->data; \
                vt_extradata_size += 2 + escape_ps(NULL, lps->data, lps->data_size); \
                num_##t##ps++; \
            } \
        }

        COUNT_SIZE_PS(V, v)
        COUNT_SIZE_PS(S, s)
        COUNT_SIZE_PS(P, p)

        vt_extradata = av_malloc(vt_extradata_size);
       if (!vt_extradata)
            return NULL;

     p = vt_extradata;
     
         if (!vt_extradata)
            return NULL;

        /* unsigned int(8) configurationVersion = 1; */
        AV_W8(p + 0, 1);

        /*
         * unsigned int(2) general_profile_space;
         * unsigned int(1) general_tier_flag;
         * unsigned int(5) general_profile_idc;
         */
        AV_W8(p + 1, ptlc.profile_space << 6 |
                     ptlc.tier_flag     << 5 |
                     ptlc.profile_idc);

        /* unsigned int(32) general_profile_compatibility_flags; */
        for (int i = 0; i < 4; i++) {
            AV_W8(p + 2 + i, ptlc.profile_compatibility_flag[i * 8] << 7 |
                             ptlc.profile_compatibility_flag[i * 8 + 1] << 6 |
                             ptlc.profile_compatibility_flag[i * 8 + 2] << 5 |
                             ptlc.profile_compatibility_flag[i * 8 + 3] << 4 |
                             ptlc.profile_compatibility_flag[i * 8 + 4] << 3 |
                             ptlc.profile_compatibility_flag[i * 8 + 5] << 2 |
                             ptlc.profile_compatibility_flag[i * 8 + 6] << 1 |
                             ptlc.profile_compatibility_flag[i * 8 + 7]);
        }

        /* unsigned int(48) general_constraint_indicator_flags; */
        AV_W8(p + 6, ptlc.progressive_source_flag    << 7 |
                     ptlc.interlaced_source_flag     << 6 |
                     ptlc.non_packed_constraint_flag << 5 |
                     ptlc.frame_only_constraint_flag << 4);
        AV_W8(p + 7, 0);
        AV_WN32(p + 8, 0);

        /* unsigned int(8) general_level_idc; */
        AV_W8(p + 12, ptlc.level_idc);

        /*
         * bit(4) reserved = ‘1111’b;
         * unsigned int(12) min_spatial_segmentation_idc;
         */
        AV_W8(p + 13, 0xf0 | (vui.min_spatial_segmentation_idc >> 4));
        AV_W8(p + 14, vui.min_spatial_segmentation_idc & 0xff);

        /*
         * bit(6) reserved = ‘111111’b;
         * unsigned int(2) parallelismType;
         */
        if (!vui.min_spatial_segmentation_idc)
            parallelismType = 0;
        else if (pps->entropy_coding_sync_enabled_flag && pps->tiles_enabled_flag)
            parallelismType = 0;
        else if (pps->entropy_coding_sync_enabled_flag)
            parallelismType = 3;
        else if (pps->tiles_enabled_flag)
            parallelismType = 2;
        else
            parallelismType = 1;
        AV_W8(p + 15, 0xfc | parallelismType);

        /*
         * bit(6) reserved = ‘111111’b;
         * unsigned int(2) chromaFormat;
         */
        AV_W8(p + 16, sps->chroma_format_idc | 0xfc);

        /*
         * bit(5) reserved = ‘11111’b;
         * unsigned int(3) bitDepthLumaMinus8;
         */
        AV_W8(p + 17, (sps->bit_depth - 8) | 0xf8);

        /*
         * bit(5) reserved = ‘11111’b;
         * unsigned int(3) bitDepthChromaMinus8;
         */
        AV_W8(p + 18, (sps->bit_depth_chroma - 8) | 0xf8);

        /* bit(16) avgFrameRate; */
        AV_WB16(p + 19, 0);

        /*
         * bit(2) constantFrameRate;
         * bit(3) numTemporalLayers;
         * bit(1) temporalIdNested;
         * unsigned int(2) lengthSizeMinusOne;
         */
        AV_W8(p + 21, 0                             << 6 |
                      sps->max_sub_layers           << 3 |
                      sps->temporal_id_nesting_flag << 2 |
                      3);

        /* unsigned int(8) numOfArrays; */
        AV_W8(p + 22, 3);

        p += 23;

    #define APPEND_PS(T, t) \
        /* \
         * bit(1) array_completeness; \
         * unsigned int(1) reserved = 0; \
         * unsigned int(6) NAL_unit_type; \
         */ \
        AV_W8(p, 1 << 7 | \
                 HEVC_NAL_##T##PS & 0x3f); \
        /* unsigned int(16) numNalus; */ \
        AV_WB16(p + 1, num_##t##ps); \
        p += 3; \
        for (int i = 0; i < HEVC_MAX_##T##PS_COUNT; i++) { \
            if (ps.t##ps_list[i]) { \
                const HEVC##T##PS *lps = (const HEVC##T##PS *)ps.t##ps_list[i]->data; \
                int size = escape_ps(p + 2, lps->data, lps->data_size); \
                /* unsigned int(16) nalUnitLength; */ \
                AV_WB16(p, size); \
                /* bit(8*nalUnitLength) nalUnit; */ \
                p += 2 + size; \
            } \
        }

        APPEND_PS(V, v)
        APPEND_PS(S, s)
        APPEND_PS(P, p)

        assert(p - vt_extradata == vt_extradata_size);
        *data_size = vt_extradata_size;
        return vt_extradata;
    }
    return NULL;
}


